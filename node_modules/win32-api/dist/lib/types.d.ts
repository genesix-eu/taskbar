/// <reference types="node" />
/**
 * node-ffi-buffer extends from Buffer
 *
 * I don't found the way to merge the ffi-buffer types automatically
 * so have to copy the def from node-ffi-buffer.d.ts.
 * with it hWnd.ref() wihout error TS2339: Property 'ref' does not exist on type 'Buffer'.
 */
export interface FFIBuffer extends Buffer {
    address(): number;
    deref(): any;
    isNull(): boolean;
    readCString(offset?: number): string;
    readInt64BE(offset?: number): string;
    readInt64LE(offset?: number): string;
    readObject(offset?: number): string;
    readPointer(offset?: number): string;
    readUInt64BE(offset?: number): string;
    readUInt64LE(offset?: number): string;
    ref(): FFIBuffer;
    reinterpret(size: number, offset?: number): FFIBuffer;
    reinterpretUntilZeros(size: number, offset?: number): FFIBuffer;
    writeCString(offset: number, input: string, encoding?: string): void;
    writeInt64BE(offset: number, input: number | string): any;
    writeInt64LE(offset: number, input: number | string): any;
    writeObject(offset: number, object: Object): void;
    writePointer(offset: number, pointer: FFIBuffer): void;
    writeUInt64BE(offset: number, input: number | string): any;
    writeUInt64LE(offset: number, input: number | string): any;
    inspect(): string;
    hexAddress(): string;
}
export declare type PID = number;
export declare type PPID = number;
export declare type FnName = string;
export declare type FFIParam = string;
export declare type FnRetType = FFIParam;
export declare type FnCallParam = FFIParam;
export declare type FnCallParams = FnCallParam[] | never[];
export declare type FnParams = [FnRetType, FnCallParams];
export interface ApiDef {
    [fn: string]: FnParams;
}
export declare type MacroParam<T> = T | [T, T, T];
export declare type MacroDef = [string, string, string];
export declare type MacroMap = Map<string, MacroDef>;
export declare type _WIN64 = boolean;
export declare type _UNICODE = boolean;
export interface WinData {
    [prop: string]: FFIParam;
}
export interface Windef {
    [prop: string]: FFIParam | MacroMap;
}
export interface LoadSettings {
    _UNICODE?: boolean;
    _WIN64?: boolean;
    _windefClone?: boolean;
    singleton: boolean;
}
export declare type HWND = Buffer;
export declare type ATOM = number;
export declare type DWORD = number;
export declare type PVOID = number;
export declare type HANDLE = Buffer;
export declare type LONG_PTR = number;
export declare type ULONG_PTR = number;
export declare type VOID = any;
export declare type WCHAR = string;
export declare type WORD = string;
export declare type BOOL = number;
export declare type BOOLEAN = boolean;
export declare type BYTE = number;
export declare type CALLBACK = Buffer;
export declare type CCHAR = string;
export declare type CHAR = string;
export declare type COLORREF = number;
export declare type DWORDLONG = number;
export declare type DWORD_PTR = number;
export declare type DWORD32 = number;
export declare type DWORD64 = number;
export declare type FLOAT = number;
export declare type HACCEL = Buffer;
export declare type HALF_PTR = number;
export declare type HBITMAP = Buffer;
export declare type HBRUSH = Buffer;
export declare type HCOLORSPACE = Buffer;
export declare type HCONV = Buffer;
export declare type HCONVLIST = Buffer;
export declare type HCURSOR = Buffer;
export declare type HDC = Buffer;
export declare type HDDEDATA = Buffer;
export declare type HDESK = Buffer;
export declare type HDROP = Buffer;
export declare type HDWP = Buffer;
export declare type HENHMETAFILE = Buffer;
export declare type HFILE = Buffer;
export declare type HFONT = Buffer;
export declare type HGDIOBJ = Buffer;
export declare type HGLOBAL = Buffer;
export declare type HHOOK = Buffer;
export declare type HICON = Buffer;
export declare type HINSTANCE = Buffer;
export declare type HKEY = Buffer;
export declare type HKL = Buffer;
export declare type HLOCAL = Buffer;
export declare type HMENU = Buffer;
export declare type HMETAFILE = Buffer;
export declare type HMODULE = Buffer;
export declare type HMONITOR = Buffer;
export declare type HPALETTE = Buffer;
export declare type HPEN = Buffer;
export declare type HRESULT = number;
export declare type HRGN = Buffer;
export declare type HRSRC = Buffer;
export declare type HSZ = Buffer;
export declare type HWINEVENTHOOK = Buffer;
export declare type HWINSTA = Buffer;
export declare type INT = number;
export declare type INT_PTR = number;
export declare type INT8 = number;
export declare type INT16 = number;
export declare type INT32 = number;
export declare type INT64 = number;
export declare type LANGID = number;
export declare type LCID = number;
export declare type LCTYPE = number;
export declare type LGRPID = number;
export declare type LONG = number;
export declare type LONGLONG = number;
export declare type LONG32 = number;
export declare type LONG64 = number;
export declare type LPARAM = number | Buffer;
export declare type LPBOOL = Buffer;
export declare type LPBYTE = Buffer;
export declare type LPCOLORREF = Buffer;
export declare type LPCSTR = Buffer;
export declare type LPCWSTR = Buffer;
export declare type LPCTSTR = Buffer;
export declare type LPVOID = Buffer;
export declare type LPCVOID = Buffer;
export declare type LPDWORD = Buffer;
export declare type LPHANDLE = Buffer;
export declare type LPINT = Buffer;
export declare type LPLONG = Buffer;
export declare type LPMSG = Buffer;
export declare type LPSTR = Buffer;
export declare type LPWSTR = Buffer;
export declare type LPTSTR = Buffer;
export declare type LPWORD = Buffer;
export declare type LRESULT = number;
export declare type NTSTATUS = number;
export declare type PBOOL = Buffer;
export declare type PBOOLEAN = Buffer;
export declare type PBYTE = Buffer;
export declare type PCHAR = Buffer;
export declare type PCSTR = Buffer;
export declare type PCTSTR = Buffer;
export declare type PCWSTR = Buffer;
export declare type PDWORD = Buffer;
export declare type PDWORDLONG = Buffer;
export declare type PDWORD_PTR = Buffer;
export declare type PDWORD32 = Buffer;
export declare type PDWORD64 = Buffer;
export declare type PFLOAT = Buffer;
export declare type PHALF_PTR = Buffer;
export declare type PHANDLE = Buffer;
export declare type PHKEY = Buffer;
export declare type PINT = Buffer;
export declare type PINT_PTR = Buffer;
export declare type PINT8 = Buffer;
export declare type PINT16 = Buffer;
export declare type PINT32 = Buffer;
export declare type PINT64 = Buffer;
export declare type PLCID = Buffer;
export declare type PLONG = Buffer;
export declare type PLONGLONG = Buffer;
export declare type PLONG_PTR = Buffer;
export declare type PLONG32 = Buffer;
export declare type PLONG64 = Buffer;
export declare type POINTER_32 = Buffer;
export declare type POINTER_64 = Buffer;
export declare type POINTER_SIGNED = Buffer;
export declare type POINTER_UNSIGNED = Buffer;
export declare type PSHORT = Buffer;
export declare type PSIZE_T = Buffer;
export declare type PSSIZE_T = Buffer;
export declare type PSTR = Buffer;
export declare type PTBYTE = Buffer;
export declare type PTCHAR = Buffer;
export declare type PTSTR = Buffer;
export declare type PUCHAR = Buffer;
export declare type PUHALF_PTR = Buffer;
export declare type PUINT = Buffer;
export declare type PUINT_PTR = Buffer;
export declare type PUINT8 = Buffer;
export declare type PUINT16 = Buffer;
export declare type PUINT32 = Buffer;
export declare type PUINT64 = Buffer;
export declare type PULONG = Buffer;
export declare type PULONGLONG = Buffer;
export declare type PULONG_PTR = Buffer;
export declare type PULONG32 = Buffer;
export declare type PULONG64 = Buffer;
export declare type PUSHORT = Buffer;
export declare type PWCHAR = Buffer;
export declare type PWORD = Buffer;
export declare type PWSTR = Buffer;
export declare type QWORD = Buffer;
export declare type SC_HANDLE = Buffer;
export declare type SC_LOCK = LPVOID;
export declare type SERVICE_STATUS_HANDLE = Buffer;
export declare type SHORT = number;
export declare type SIZE_T = Buffer;
export declare type SSIZE_T = Buffer;
export declare type TBYTE = number;
export declare type TCHAR = string;
export declare type UCHAR = string;
export declare type UHALF_PTR = number;
export declare type UINT = number;
export declare type UINT_PTR = number;
export declare type UINT8 = number;
export declare type UINT16 = number;
export declare type UINT32 = number;
export declare type UINT64 = number;
export declare type ULONG = number;
export declare type ULONGLONG = number;
export declare type ULONG32 = number;
export declare type ULONG64 = number;
export declare type UNICODE_STRING = Buffer;
export declare type USHORT = number;
export declare type USN = number;
export declare type WINEVENTPROC = Buffer;
export declare type WPARAM = number | Buffer;
export declare type WNDENUMPROC = Buffer;
export declare type WNDPROC = Buffer;
export declare type LPINITCOMMONCONTROLSEX = Buffer;
export declare type LPWNDCLASSEX = Buffer;
export declare type PWINDOWINFO = Buffer;
export declare type va_list = Buffer;
export declare type INITCOMMONCONTROLSEX = Buffer;
export interface InitCommonControlsEXStruct {
    dwSize: DWORD;
    dwICC: DWORD;
}
export declare type MSG = Buffer;
export interface MsgStruct {
    hwnd: HWND;
    message: UINT;
    wParam: WPARAM;
    lParam: LPARAM;
    time: DWORD;
    pt: POINT;
}
export declare type POINT = Buffer;
export interface PointStruct {
    x: LONG;
    y: LONG;
}
export declare type WNDCLASSEX = Buffer;
export interface WndClassEXStruct {
    cbSize: UINT;
    style: UINT;
    lpfnWndProc: WNDPROC;
    cbClsExtra: INT;
    cbWndExtra: INT;
    hInstance: HINSTANCE;
    hIcon: HICON;
    hCursor: HCURSOR;
    hbrBackground: HBRUSH;
    lpszMenuName: LPCTSTR;
    lpszClassName: LPCTSTR;
    hIconSm: HICON;
}
export declare type WINDOWINFO = Buffer;
export interface WindowInfoStruct {
    cbSize: DWORD;
    rcWindow: VOID;
    rcClient: VOID;
    dwStyle: DWORD;
    dwExStyle: DWORD;
    dwWindowStatus: DWORD;
    cxWindowBorders: UINT;
    cyWindowBorders: UINT;
    atomWindowType: ATOM;
    wCreatorVersion: WORD;
}
export declare type RECT = Buffer;
export interface RectStruct {
    left: LONG;
    top: LONG;
    right: LONG;
    bottom: LONG;
}
