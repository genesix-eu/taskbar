'use strict';
// windows data types for ref module https://github.com/TooTallNate/ref
// https://msdn.microsoft.com/en-us/library/windows/desktop/aa383751
Object.defineProperty(exports, '__esModule', { value: true });
const Conf = require('./conf');
/**
 * macro convert method
 * Conf._WIN64_HOLDER or Conf._UNICODE_HOLDER
 *
 * demo: const PVOID = Conf._WIN64_HOLDER;
 */
exports.ATOM = 'uint16';
exports.DWORD = 'uint32';
exports.PVOID = Conf._WIN64_HOLDER;
exports.HANDLE = 'PVOID';
exports.LONG_PTR = Conf._WIN64_HOLDER;
exports.ULONG_PTR = Conf._WIN64_HOLDER;
exports.VOID = 'void';
exports.WCHAR = 'uint16';
exports.WORD = 'int16';
exports.BOOL = 'int';
exports.BOOLEAN = 'bool';
exports.BYTE = 'byte';
exports.CALLBACK = 'pointer'; // https://msdn.microsoft.com/en-us/library/windows/desktop/ms633573(v=vs.85).aspx
exports.CCHAR = 'char';
exports.CHAR = 'char';
exports.COLORREF = 'DWORD';
// export const CONST;
exports.DWORDLONG = 'uint64';
exports.DWORD_PTR = 'ULONG_PTR';
exports.DWORD32 = 'uint32';
exports.DWORD64 = 'uint64';
exports.FLOAT = 'float';
exports.HACCEL = 'HANDLE';
exports.HALF_PTR = Conf._WIN64_HOLDER;
exports.HBITMAP = 'HANDLE';
exports.HBRUSH = 'HANDLE';
exports.HCOLORSPACE = 'HANDLE';
exports.HCONV = 'HANDLE';
exports.HCONVLIST = 'HANDLE';
exports.HCURSOR = 'HANDLE';
exports.HDC = 'HANDLE';
exports.HDDEDATA = 'HANDLE';
exports.HDESK = 'HANDLE';
exports.HDROP = 'HANDLE';
exports.HDWP = 'HANDLE';
exports.HENHMETAFILE = 'HANDLE';
exports.HFILE = 'HANDLE'; // typedef int HFILE;
exports.HFONT = 'HANDLE';
exports.HGDIOBJ = 'HANDLE';
exports.HGLOBAL = 'HANDLE';
exports.HHOOK = 'HANDLE';
exports.HICON = 'HANDLE';
exports.HINSTANCE = 'HANDLE';
exports.HKEY = 'HANDLE';
exports.HKL = 'HANDLE';
exports.HLOCAL = 'HANDLE';
exports.HMENU = 'HANDLE';
exports.HMETAFILE = 'HANDLE';
exports.HMODULE = exports.HINSTANCE;
exports.HMONITOR = 'HANDLE';
exports.HPALETTE = 'HANDLE';
exports.HPEN = 'HANDLE';
exports.HRESULT = 'long';
exports.HRGN = 'HANDLE';
exports.HRSRC = 'HANDLE';
exports.HSZ = 'HANDLE';
exports.HWINEVENTHOOK = 'HANDLE';
exports.HWINSTA = 'HANDLE';
exports.HWND = 'HANDLE';
exports.INT = 'int';
exports.INT_PTR = Conf._WIN64_HOLDER;
exports.INT8 = 'int8';
exports.INT16 = 'int16';
exports.INT32 = 'int32';
exports.INT64 = 'int64';
exports.LANGID = 'WORD';
exports.LCID = 'DWORD';
exports.LCTYPE = 'DWORD';
exports.LGRPID = 'DWORD';
exports.LONG = 'long';
exports.LONGLONG = 'longlong';
exports.LONG32 = 'int32';
exports.LONG64 = 'int64';
exports.LPARAM = 'LONG_PTR';
exports.LPBOOL = 'BOOL';
exports.LPBYTE = 'BYTE';
exports.LPCOLORREF = 'DWORD';
exports.LPCSTR = 'uint8*';
exports.LPCWSTR = 'uint16*';
exports.LPCTSTR = Conf._UNICODE_HOLDER;
exports.LPVOID = 'void*';
exports.LPCVOID = 'LPVOID';
exports.LPDWORD = 'uint16*';
exports.LPHANDLE = Conf._WIN64_HOLDER; // A pointer to a HANDLE.
exports.LPINT = 'int*';
exports.LPLONG = 'int32*';
exports.LPMSG = 'pointer'; // A pointer to a MSG
exports.LPSTR = 'char*';
exports.LPWSTR = 'uint16*';
exports.LPTSTR = Conf._UNICODE_HOLDER;
exports.LPWORD = 'uint16*';
exports.LRESULT = 'LONG_PTR';
exports.NTSTATUS = 'uint32';
exports.PBOOL = 'int*'; // ? 'bool*'
exports.PBOOLEAN = 'bool*';
exports.PBYTE = 'byte*';
exports.PCHAR = 'char*';
exports.PCSTR = 'uint8*';
exports.PCTSTR = Conf._WIN64_HOLDER;
exports.PCWSTR = 'uint16*';
exports.PDWORD = 'uint32*';
exports.PDWORDLONG = 'uint64*';
exports.PDWORD_PTR = 'DWORD_PTR';
exports.PDWORD32 = 'uint32*';
exports.PDWORD64 = 'uint64*';
exports.PFLOAT = 'float*';
exports.PHALF_PTR = 'pointer'; // ? A pointer to a HALF_PTR.
exports.PHANDLE = Conf._WIN64_HOLDER;
exports.PHKEY = Conf._WIN64_HOLDER;
exports.PINT = 'int*';
exports.PINT_PTR = 'int**';
exports.PINT8 = 'int8*';
exports.PINT16 = 'int16*';
exports.PINT32 = 'int32*';
exports.PINT64 = 'int64*';
exports.PLCID = 'uint32*';
exports.PLONG = 'long*';
exports.PLONGLONG = 'int64*';
exports.PLONG_PTR = 'LONG_PTR';
exports.PLONG32 = 'int32*';
exports.PLONG64 = 'int64*';
exports.POINTER_32 = Conf._WIN64_HOLDER; // ? A 32-bit pointer. On a 32-bit system, this is a native pointer. On a 64-bit system, this is a truncated 64-bit pointer.
exports.POINTER_64 = Conf._WIN64_HOLDER; // ? A 64-bit pointer. On a 64-bit system, this is a native pointer. On a 32-bit system, this is a sign-extended 32-bit pointer.
exports.POINTER_SIGNED = 'pointer'; // ? A signed pointer.
exports.POINTER_UNSIGNED = 'pointer'; // An unsigned pointer.
exports.PSHORT = 'int16*';
exports.PSIZE_T = 'ULONG_PTR'; // ?
exports.PSSIZE_T = 'pointer';
exports.PSTR = 'char*';
exports.PTBYTE = Conf._UNICODE_HOLDER;
exports.PTCHAR = Conf._UNICODE_HOLDER;
exports.PTSTR = Conf._UNICODE_HOLDER;
exports.PUCHAR = 'pointer';
exports.PUHALF_PTR = 'pointer';
exports.PUINT = 'uint*';
exports.PUINT_PTR = 'uint**';
exports.PUINT8 = 'uint8*';
exports.PUINT16 = 'uint16*';
exports.PUINT32 = 'uint32*';
exports.PUINT64 = 'uint64*';
exports.PULONG = 'uint*';
exports.PULONGLONG = 'uint64*';
exports.PULONG_PTR = 'uint64**';
exports.PULONG32 = 'uint*';
exports.PULONG64 = 'uint64*';
exports.PUSHORT = 'uint16*';
exports.PWCHAR = 'uint16*';
exports.PWORD = 'uint16*';
exports.PWSTR = 'uint16*';
exports.QWORD = 'uint64';
exports.SC_HANDLE = 'HANDLE';
exports.SC_LOCK = 'LPVOID';
exports.SERVICE_STATUS_HANDLE = 'HANDLE';
exports.SHORT = 'int16';
exports.SIZE_T = 'ULONG_PTR'; // ?
exports.SSIZE_T = 'LONG_PTR'; // ?
exports.TBYTE = Conf._UNICODE_HOLDER;
exports.TCHAR = Conf._UNICODE_HOLDER;
exports.UCHAR = 'uchar';
exports.UHALF_PTR = Conf._WIN64_HOLDER;
exports.UINT = 'uint';
exports.UINT_PTR = 'uint';
exports.UINT8 = 'uint8';
exports.UINT16 = 'uint16';
exports.UINT32 = 'uint32';
exports.UINT64 = 'uint64';
exports.ULONG = 'uint';
exports.ULONGLONG = 'uint64';
exports.ULONG32 = 'uint32';
exports.ULONG64 = 'uint64';
exports.USHORT = 'ushort';
exports.UNICODE_STRING = 'pointer';
exports.USN = 'LONGLONG';
// export const WINAPI;
exports.WINEVENTPROC = 'pointer';
exports.WNDENUMPROC = 'pointer';
exports.WNDPROC = 'pointer';
/**
 * Caution: original be  typedef UINT_PTR WPARAM;
 * but the CALLBACK WNDCLASSEX.lpfnWndProc will pass negative number and cause process exit.
 * so change to LONG_PTR
 */
//export const WPARAM = UINT_PTR;
exports.WPARAM = 'LONG_PTR';
exports.LPINITCOMMONCONTROLSEX = 'pointer'; // A pointer to an INITCOMMONCONTROLSEX
exports.LPWNDCLASSEX = 'pointer'; // A pointer to a WNDCLASSEX
exports.PWINDOWINFO = 'pointer'; // A pointer to a WINDOWINFO structure
exports.va_list = 'char*';
/* ------------------ struct ---------------------- */
exports.INITCOMMONCONTROLSEX = 'pointer';
exports.MSG = 'pointer';
exports.POINT = 'pointer';
exports.WNDCLASSEX = 'pointer';
exports.WINDOWINFO = 'pointer';
exports.RECT = 'pointer'; // _RECT
/* ------------------ for macro conversion ---------------------- */
exports.macroMap = new Map([
    ['PVOID', [Conf._WIN64_HOLDER, 'uint64*', 'uint32*']],
    ['LONG_PTR', [Conf._WIN64_HOLDER, 'int64', 'int32']],
    ['ULONG_PTR', [Conf._WIN64_HOLDER, 'uint64', 'uint32']],
    ['HALF_PTR', [Conf._WIN64_HOLDER, 'int32', 'int16']],
    ['INT_PTR', [Conf._WIN64_HOLDER, 'int64', 'int32']],
    ['LPCTSTR', [Conf._UNICODE_HOLDER, exports.LPCWSTR, exports.LPCSTR]],
    ['LPHANDLE', [Conf._WIN64_HOLDER, 'uint64*', 'uint32*']],
    ['LPTSTR', [Conf._UNICODE_HOLDER, exports.LPWSTR, 'uint8*']],
    ['PCTSTR', [Conf._WIN64_HOLDER, exports.LPCWSTR, exports.LPCSTR]],
    ['PHANDLE', [Conf._WIN64_HOLDER, 'uint64**', 'uint32**']],
    ['PHKEY', [Conf._WIN64_HOLDER, 'uint64*', 'uint32*']],
    ['POINTER_32', [Conf._WIN64_HOLDER, 'uint64*', 'uint32*']],
    ['POINTER_64', [Conf._WIN64_HOLDER, 'uint64*', 'uint32*']],
    ['PTBYTE', [Conf._UNICODE_HOLDER, 'int16*', 'int8*']],
    ['PTCHAR', [Conf._UNICODE_HOLDER, 'uint16*', 'uint8*']],
    ['PTSTR', [Conf._UNICODE_HOLDER, exports.LPWSTR, exports.LPSTR]],
    ['TBYTE', [Conf._UNICODE_HOLDER, 'int16', 'int8']],
    ['TCHAR', [Conf._UNICODE_HOLDER, exports.WCHAR, 'uint8']],
    ['UHALF_PTR', [Conf._WIN64_HOLDER, 'uint32', 'uint16']],
]);
